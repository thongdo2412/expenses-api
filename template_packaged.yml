AWSTemplateFormatVersion: '2010-09-09'
Description: Expenses API Lambda
Resources:
  ApiGatewayApi:
    Properties:
      CacheClusterEnabled: false
      DefinitionBody:
        info:
          title:
            Ref: AWS::StackName
        paths:
          /api/{proxy+}:
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: 200
                type: mock
            x-amazon-apigateway-any-method:
              responses: {}
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ExpensesAPIFunction.Arn}/invocations
        securityDefinitions:
          expenses-cognito-authorizer:
            in: header
            name: Authorization
            type: apiKey
            x-amazon-apigateway-authorizer:
              providerARNs:
              - Fn::GetAtt:
                - UserPool
                - Arn
              type: cognito_user_pools
            x-amazon-apigateway-authtype: cognito_user_pools
        swagger: 2.0
      Name: expenses-api
      StageName: prod
    Type: AWS::Serverless::Api
  CognitoIdentityPool:
    Properties:
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
      - ClientId:
          Ref: UserPoolClient
        ProviderName:
          Fn::Sub:
          - cognito-idp.us-east-1.amazonaws.com/${UserPoolId}
          - UserPoolId:
              Ref: UserPool
      DeveloperProviderName: expenses
      IdentityPoolName: expenses
    Type: AWS::Cognito::IdentityPool
  CognitoIdentityPoolRole:
    Properties:
      IdentityPoolId:
        Ref: CognitoIdentityPool
      Roles:
        authenticated:
          Fn::GetAtt:
          - ExpensesLambdaRole
          - Arn
        unauthenticated:
          Fn::GetAtt:
          - ExpensesLambdaRole
          - Arn
    Type: AWS::Cognito::IdentityPoolRoleAttachment
  ExpensesAPIFunction:
    Properties:
      CodeUri: s3://expenses-api/expenses-api/a23f3f9f26e7dbf2a42d51ad3dec43b5
      Description: Expense Input API Lambda
      Events:
        GetApiProxyResource:
          Properties:
            Method: any
            Path: /api/{proxy+}
            RestApiId:
              Ref: ApiGatewayApi
          Type: Api
      FunctionName: expenses-api
      Handler: index.handler
      MemorySize: 128
      Policies: AmazonDynamoDBFullAccess
      Role:
        Fn::GetAtt:
        - ExpensesLambdaRole
        - Arn
      Runtime: nodejs6.10
      Timeout: 300
    Type: AWS::Serverless::Function
  ExpensesLambdaRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Sid: AllowLambdaServiceToAssumeRole
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      Path: /
    Type: AWS::IAM::Role
  ExpensesTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: email
        AttributeType: S
      - AttributeName: added_date
        AttributeType: S
      KeySchema:
      - AttributeName: email
        KeyType: HASH
      - AttributeName: added_date
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
    Type: AWS::DynamoDB::Table
  UserPool:
    Properties:
      AutoVerifiedAttributes:
      - email
      EmailConfiguration:
        ReplyToEmailAddress: dhthong@gmail.com
      EmailVerificationSubject: Welcome to Expenses Input App!
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      UserPoolName: ExpensesPool
    Type: AWS::Cognito::UserPool
  UserPoolClient:
    Properties:
      ClientName: expenses-ui
      GenerateSecret: false
      UserPoolId:
        Ref: UserPool
    Type: AWS::Cognito::UserPoolClient
Transform: AWS::Serverless-2016-10-31
